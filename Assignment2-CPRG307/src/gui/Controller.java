package gui;

import database.DatabaseUtil;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.stage.Stage;

import java.io.IOException;
import java.sql.SQLException;

public class Controller {
    @FXML
    Button checkButton;
    @FXML
    Button processButton;
    @FXML
    Button performButton;
    @FXML
    Button exportButton;
    @FXML
    Button exportConfirmButton;
    @FXML
    Button connectButton;
    @FXML
    Button processTextButton;
    @FXML
    Button closeButton;
    @FXML
    TextField usernameField;
    @FXML
    TextField passwordField;
    @FXML
    TextField processField;
    @FXML
    TextField exportPathField;
    @FXML
    TextField exportFilenameField;
    @FXML
    TextField exportAliasField;

    private DatabaseUtil util;
    private static boolean connected = false;

    /**
     * Handle all events generated by all buttons in the GUI.
     * @param event An event generated from the GUI.
     */
    @FXML
    public void buttonHandler(ActionEvent event) {
        if (event.getSource().equals(checkButton)) {
            showConnectWindow();
        }

        else if (event.getSource().equals(processButton)) {
            if (connected)
                showProcessWindow();
            else {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error");
                alert.setContentText("Please connect first.");
                alert.showAndWait();
            }

        }

        else if (event.getSource().equals(exportButton)) {
            if (connected)
                showExportWindow();
            else {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error");
                alert.setContentText("Please connect first.");
                alert.showAndWait();
            }
        }

        else if (event.getSource().equals(performButton)) {
            if (connected)
                doMonthEnd();
            else {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error");
                alert.setContentText("Please connect first.");
                alert.showAndWait();
            }
        }

        else if (event.getSource().equals(connectButton)){
            connect();
        }

        else if (event.getSource().equals(closeButton)) {
            if (util != null)
                util.closeConnection();
            Stage stage = (Stage) closeButton.getScene().getWindow();
            stage.close();
        }

        else if (event.getSource().equals(processTextButton)) {
            processFile();
        }

        else if (event.getSource().equals(exportConfirmButton)) {
            export();
            Stage stage = (Stage) exportConfirmButton.getScene().getWindow();
            stage.close();
        }

    }

    /**
     * Display the connect window when the connect button is pressed.
     */
    private void showConnectWindow() {
        try {
            FXMLLoader loader = new FXMLLoader();
            loader.setLocation(getClass().getResource("check.fxml"));
            Scene scene =  new Scene(loader.load(), 300, 150);
            Stage stage = new Stage();
            stage.setTitle("Connect");
            stage.setScene(scene);
            stage.showAndWait();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Display the process window when the process button is pressed
     */
    private void showProcessWindow() {
        try {
            FXMLLoader loader = new FXMLLoader();
            loader.setLocation(getClass().getResource("process.fxml"));
            Scene scene =  new Scene(loader.load(), 300, 100);
            Stage stage = new Stage();
            stage.setTitle("Process Text File");
            stage.setScene(scene);
            stage.showAndWait();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Display the export window when the export button is pressed
     */
    private void showExportWindow() {
        try {
            FXMLLoader loader = new FXMLLoader();
            loader.setLocation(getClass().getResource("export.fxml"));
            Scene scene =  new Scene(loader.load(), 300, 250);
            Stage stage = new Stage();
            stage.setTitle("Process Text File");
            stage.setScene(scene);
            stage.showAndWait();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Connect to the back end using DatabaseUtil with a username and password.
     * If the information given does not result in successful connection, an error will be displayed.
     */
    private void connect() {
        String username = usernameField.getText();
        String password = passwordField.getText();

        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error");
            alert.setContentText("Please enter ");
            alert.showAndWait();
        }

        util = DatabaseUtil.getDatabaseUtil();

        connected = util.connection(username, password);
        if (connected) {
            Stage stage = (Stage) connectButton.getScene().getWindow();
            stage.close();

            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
            alert.setTitle("Success");
            alert.setContentText("Connection made");
            alert.showAndWait();

        }

        else {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Failed");
            alert.setContentText("Connection Failed");
            alert.showAndWait();
        }
    }

    /**
     * Using DatabaseUtil, process a delimited file into the database.
     */
    private void processFile() {
        String path = processField.getText();

        if (path == null || path.isEmpty()) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Empty Path");
            alert.setContentText("Please enter a file name.");
            alert.showAndWait();
        }

        util = DatabaseUtil.getDatabaseUtil();
        util.loadFile(path);
        Stage stage = (Stage) processTextButton.getScene().getWindow();
        stage.close();
    }

    /**
     * Do the month end operations using DatabaseUtil
     */
    private void doMonthEnd() {
        util = DatabaseUtil.getDatabaseUtil();
        try {
            util.doMonthEnd();
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
            alert.setTitle("Success");
            alert.setContentText("Performance complete");
            alert.showAndWait();
        } catch (SQLException e) {
            e.printStackTrace();
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error");
            alert.setContentText("Error was encountered with the database");
            alert.showAndWait();
        }
    }

    /**
     * Use the export function from DatabaseUtil to export the NEW_TRANSACTION table to a file.
     * Displays an error if there is an error completing the operation.
     */
    private void export() {
        util = DatabaseUtil.getDatabaseUtil();
        String directory = exportPathField.getText();
        String fileName = exportFilenameField.getText();
        String alias = exportAliasField.getText();

        if (directory == null || fileName == null || alias == null || directory.isEmpty() || fileName.isEmpty() || alias.isEmpty()) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error");
            alert.setContentText("Please enter something for every field");
            alert.showAndWait();
        }

        try {
            util.export(directory, fileName, alias);
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
            alert.setTitle("Success");
            alert.setContentText("File Exported Successfully");
            alert.showAndWait();
        } catch (SQLException e) {
            e.printStackTrace();
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error");
            alert.setContentText("Error was encountered when exporting.");
            alert.showAndWait();
        }
    }
}
